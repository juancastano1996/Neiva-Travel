addcustomer.page.html
<ion-header>
  <ion-toolbar>
    <ion-title>Agregar monumento</ion-title>
    <ion-buttons slot="primary">
      <ion-back-button text="atras" icon="" color="primary" fill="outline"></ion-back-button>
    </ion-buttons>
  </ion-toolbar>
</ion-header>

<ion-content>
  <ion-item>
    <ion-label position="floating">Nombre</ion-label>
    <ion-input type="text" [(ngModel)]="name_customer" placeholder="Escriba el nombre"></ion-input>
  </ion-item>
  <ion-item>
    <ion-label position="floating">Descripcion</ion-label>
    <ion-textarea [(ngModel)]="desc_customer" placeholder="Escriba la descripcion del monumento"></ion-textarea>
  </ion-item>
  <ion-list>
    <ion-item>
      <ion-label>Posición actual</ion-label>
      <ion-spinner name="lines-small"
                    *ngIf="cargandoGeo"></ion-spinner>
      <ion-toggle checked="true" slot="end"
                  [(ngModel)]= "posicion"
                  id="posicion"
                  (ionChange)= "getGeo()"></ion-toggle>
    </ion-item>
    
    <ion-grid>
      <ion-row>
        <ion-item>
        <ion-col>
          <ion-label position="floating">Latitud</ion-label>
          <ion-textarea  type="number" [(ngModel)]="latitud_monumento" id="latitud" pattern="[0-9-]+([.][0-9]+)"></ion-textarea>
        </ion-col>
      </ion-item>
      <ion-item>
        <ion-col>
          <ion-label position="floating">Longitud</ion-label>
          <ion-textarea type="number" [(ngModel)]="longitud_monumento" id="longitud" pattern="[0-9-]+([.][0-9]+)"></ion-textarea>
        </ion-col>
      </ion-item>
      </ion-row>
    </ion-grid>
    
  </ion-list>
  <ion-row>
    <ion-col size="6">
      <ion-button expand="full"
                  shape="round"
                  (click)="camara()">
        <ion-icon slot="start" name="camera"></ion-icon>
        Cámara
      </ion-button>
    </ion-col>
    <ion-col size="6">
      <ion-button expand="full"
                  shape="round"
                  (click)="libreria()">
        <ion-icon slot="start" name="images"></ion-icon>
        Galería
      </ion-button>
    </ion-col>
  </ion-row>
  <ion-row>
    <ion-col size="3" *ngFor="let image of tempImages">
      <ion-card>
        <img [src]="image">
      </ion-card>
    </ion-col>
  </ion-row>
  
</ion-content>
<ion-footer no-border>
  <ion-button expand="block" pading color="primary" *ngIf="!id" (click)="createdProcess()" fill="outline">Ingresar</ion-button>
  <ion-button expand="block" pading color="primary" *ngIf="id>=1" (click)="updateProcess()" fill="outline">Actualizar</ion-button>
</ion-footer>




addcustomer.page.ts



import { Component, OnInit, EventEmitter } from '@angular/core';
import { PostProvider} from '../../providers/post-provider';
import { Router, ActivatedRoute } from '@angular/router';
import { ToastController } from '@ionic/angular';
import { Geolocation } from '@ionic-native/geolocation/ngx';
import { Camera, CameraOptions } from '@ionic-native/camera/ngx';

declare var window: any;

@Component({
  selector: 'app-addcustomer',
  templateUrl: './addcustomer.page.html',
  styleUrls: ['./addcustomer.page.scss'],
})
export class AddcustomerPage implements OnInit {
  cargandoGeo = false;
  items: any; 
  name_customer: string = "";
  desc_customer: string = "";
  latitud_monumento: number;
  longitud_monumento: number;
  longitud :number;
  latitud:number;
  posicion: string;

  id: number;
  nuevoPost = new EventEmitter<PostProvider>();
  tempImages: string[]=[];

  constructor(private postPvdr: PostProvider, 
              private router:Router, 
              private actRoute: ActivatedRoute,
              public toastCtrl: ToastController,
              private geolocation:Geolocation,
              private camera: Camera) { }

  ngOnInit() {
    this.actRoute.params.subscribe((data:any)=>{
      this.id = data.id;
  		this.name_customer = data.name;
      this.desc_customer = data.desc;
      this.latitud_monumento = data.lat;
      this.longitud_monumento = data.long;
      this.posicion=data.pos;
 

  		console.log(data);
    });
  }
  createdProcess(){
    return new Promise(resolve => {
      let body = {
        aksi: 'add',
        name_customer : this.name_customer,
        desc_customer : this.desc_customer,
        latitud_monumento : this.latitud_monumento,
        longitud_monumento: this.longitud_monumento,
       
      };
      this.postPvdr.postData(body,'proses-api.php')
      .subscribe(data => {
        this.router.navigate(['/customer']);
        console.log('ok');
      });

    });

  }
  updateProcess(){
    return new Promise(resolve => {
      let body = {
        aksi : 'update',
  			customer_id : this.id,
  			name_customer : this.name_customer,
        desc_customer : this.desc_customer,
        latitud_monumento : this.latitud_monumento,
        longitud_monumento: this.longitud_monumento,
     
      };
      this.postPvdr.postData(body,'proses-api.php')
      .subscribe(data => {
        this.router.navigate(['/customer']);
        console.log('ok');
      });

    });

  }

  
  getGeo(){

    if(!this.posicion){
      this.latitud_monumento = null;
      this.longitud_monumento = null;
      return;
    }
    if(this.posicion){
      this.latitud_monumento = null;
      this.longitud_monumento = null;
      return;
    }

    this.cargandoGeo = true;

    this.geolocation.getCurrentPosition().then((resp) => {
      // resp.coords.latitude
      // resp.coords.longitude
      this.cargandoGeo = false;
      
      const longitude =  parseFloat(`${resp.coords.longitude}`)
      const latitude =  parseFloat(`${resp.coords.latitude}`);
      console.log(longitude,latitude);
      this.longitud = longitude;
      this.latitud = latitude;
      this.longitud_monumento = this.longitud;
      this.latitud_monumento = this.latitud;
    }).catch((error) => {
      console.log('Error getting location', error);
      this.cargandoGeo = false;
    });
    console.log('OK', this.latitud_monumento);
        
  }

  camara(){
    const options: CameraOptions = {
      quality: 60,
      destinationType: this.camera.DestinationType.FILE_URI,
      encodingType: this.camera.EncodingType.JPEG,
      mediaType: this.camera.MediaType.PICTURE,
      correctOrientation: true,
      sourceType: this.camera.PictureSourceType.CAMERA
    };

    this.procesarImagen(options);
    
  }


  libreria(){
    const options: CameraOptions = {
      quality: 60,
      destinationType: this.camera.DestinationType.FILE_URI,
      encodingType: this.camera.EncodingType.JPEG,
      mediaType: this.camera.MediaType.PICTURE,
      correctOrientation: true,
      sourceType: this.camera.PictureSourceType.PHOTOLIBRARY
    };

    this.procesarImagen(options);

  }

  procesarImagen(options: CameraOptions){
    this.camera.getPicture(options).then( (imageData) => {
      // imageData is either a base64 encoded string or a file URI
      // If it's base64 (DATA_URL):
      const img = window.Ionic.webView.convertFileSrc(imageData);
      console.log(img);
      this.tempImages.push( img );
     }, (err) => {
      // Handle error
     });
  }

}

